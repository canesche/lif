; ModuleID = 'mu/llvm-ir/main2.ll'
source_filename = "llvm-link"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@__const.main.a = private unnamed_addr constant [3 x i32] [i32 1, i32 3, i32 5], align 4
@.str = private unnamed_addr constant [10 x i8] c"%d\09%d\09%d\0A\00", align 1

; Function Attrs: noinline nounwind sspstrong uwtable
define dso_local i32 @main() local_unnamed_addr #0 {
  %1 = alloca [3 x i32], align 4
  %2 = bitcast [3 x i32]* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 dereferenceable(12) %2, i8* nonnull align 4 dereferenceable(12) bitcast ([3 x i32]* @__const.main.a to i8*), i64 12, i1 false)
  %3 = getelementptr inbounds [3 x i32], [3 x i32]* %1, i64 0, i64 0
  call void @mu(i32* nonnull %3)
  %4 = load i32, i32* %3, align 4
  %5 = getelementptr inbounds [3 x i32], [3 x i32]* %1, i64 0, i64 1
  %6 = load i32, i32* %5, align 4
  %7 = getelementptr inbounds [3 x i32], [3 x i32]* %1, i64 0, i64 2
  %8 = load i32, i32* %7, align 4
  %9 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i64 0, i64 0), i32 %4, i32 %6, i32 %8)
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nofree nounwind
declare i32 @printf(i8* nocapture readonly, ...) local_unnamed_addr #2

; Function Attrs: nofree noinline norecurse nounwind sspstrong uwtable
define dso_local void @mu(i32* %0) local_unnamed_addr #3 {
  %2 = load i32, i32* %0, align 4
  %3 = shl i32 %2, 2
  %4 = and i32 %3, 4
  %5 = getelementptr inbounds i32, i32* %0, i64 1
  %6 = load i32, i32* %5, align 4
  %7 = shl i32 %6, 2
  %8 = and i32 %7, 4
  %9 = getelementptr inbounds i32, i32* %0, i64 2
  %10 = load i32, i32* %9, align 4
  %11 = shl i32 %10, 2
  %12 = and i32 %11, 4
  %13 = and i32 %2, 2
  %14 = or i32 %4, %13
  %15 = and i32 %6, 2
  %16 = or i32 %8, %15
  %17 = and i32 %10, 2
  %18 = or i32 %12, %17
  %.mask = and i32 %10, 4
  %19 = lshr i32 %10, 2
  %20 = and i32 %19, 2
  %.mask240 = and i32 %6, 4
  %21 = lshr i32 %6, 2
  %22 = and i32 %21, 2
  %.mask241 = and i32 %2, 4
  %23 = lshr i32 %2, 2
  %24 = and i32 %23, 2
  %25 = lshr i32 %2, 4
  %26 = and i32 %25, 1
  %27 = or i32 %24, %.mask241
  %28 = or i32 %27, %26
  %29 = lshr i32 %6, 4
  %30 = and i32 %29, 1
  %31 = or i32 %22, %.mask240
  %32 = or i32 %31, %30
  %33 = lshr i32 %10, 4
  %34 = and i32 %33, 1
  %35 = or i32 %20, %.mask
  %36 = or i32 %35, %34
  %37 = shl nuw nsw i32 %18, 4
  %38 = shl nuw nsw i32 %36, 2
  %39 = or i32 %37, %38
  %40 = and i32 %33, 2
  %41 = shl nuw nsw i32 %16, 4
  %42 = shl nuw nsw i32 %32, 2
  %43 = or i32 %41, %42
  %44 = and i32 %29, 2
  %45 = shl nuw nsw i32 %14, 4
  %46 = shl nuw nsw i32 %28, 2
  %47 = or i32 %45, %46
  %48 = and i32 %25, 2
  %49 = lshr i32 %2, 6
  %50 = and i32 %49, 1
  %51 = or i32 %50, %48
  %52 = or i32 %51, %47
  %53 = lshr i32 %6, 6
  %54 = and i32 %53, 1
  %55 = or i32 %54, %44
  %56 = or i32 %55, %43
  %57 = lshr i32 %10, 6
  %58 = and i32 %57, 1
  %59 = or i32 %58, %40
  %60 = or i32 %59, %39
  %61 = and i32 %57, 2
  %62 = and i32 %53, 2
  %63 = and i32 %49, 2
  %64 = lshr i32 %2, 8
  %65 = and i32 %64, 1
  %66 = or i32 %65, %63
  %67 = lshr i32 %6, 8
  %68 = and i32 %67, 1
  %69 = or i32 %68, %62
  %70 = lshr i32 %10, 8
  %71 = and i32 %70, 1
  %72 = or i32 %71, %61
  %73 = shl nuw nsw i32 %60, 4
  %74 = shl nuw nsw i32 %72, 2
  %75 = or i32 %73, %74
  %76 = and i32 %70, 2
  %77 = shl nuw nsw i32 %56, 4
  %78 = shl nuw nsw i32 %69, 2
  %79 = or i32 %77, %78
  %80 = and i32 %67, 2
  %81 = shl nuw nsw i32 %52, 4
  %82 = shl nuw nsw i32 %66, 2
  %83 = or i32 %81, %82
  %84 = and i32 %64, 2
  %85 = lshr i32 %2, 10
  %86 = and i32 %85, 1
  %87 = or i32 %86, %84
  %88 = or i32 %87, %83
  %89 = lshr i32 %6, 10
  %90 = and i32 %89, 1
  %91 = or i32 %90, %80
  %92 = or i32 %91, %79
  %93 = lshr i32 %10, 10
  %94 = and i32 %93, 1
  %95 = or i32 %94, %76
  %96 = or i32 %95, %75
  %97 = and i32 %93, 2
  %98 = and i32 %89, 2
  %99 = and i32 %85, 2
  %100 = lshr i32 %2, 12
  %101 = and i32 %100, 1
  %102 = or i32 %101, %99
  %103 = lshr i32 %6, 12
  %104 = and i32 %103, 1
  %105 = or i32 %104, %98
  %106 = lshr i32 %10, 12
  %107 = and i32 %106, 1
  %108 = or i32 %107, %97
  %109 = shl i32 %96, 4
  %110 = shl nuw nsw i32 %108, 2
  %111 = or i32 %109, %110
  %112 = and i32 %106, 2
  %113 = shl i32 %92, 4
  %114 = shl nuw nsw i32 %105, 2
  %115 = or i32 %113, %114
  %116 = and i32 %103, 2
  %117 = shl i32 %88, 4
  %118 = shl nuw nsw i32 %102, 2
  %119 = or i32 %117, %118
  %120 = and i32 %100, 2
  %121 = lshr i32 %2, 14
  %122 = and i32 %121, 1
  %123 = or i32 %122, %120
  %124 = or i32 %123, %119
  %125 = lshr i32 %6, 14
  %126 = and i32 %125, 1
  %127 = or i32 %126, %116
  %128 = or i32 %127, %115
  %129 = lshr i32 %10, 14
  %130 = and i32 %129, 1
  %131 = or i32 %130, %112
  %132 = or i32 %131, %111
  %133 = and i32 %129, 2
  %134 = and i32 %125, 2
  %135 = and i32 %121, 2
  %136 = lshr i32 %2, 16
  %137 = and i32 %136, 1
  %138 = or i32 %137, %135
  %139 = lshr i32 %6, 16
  %140 = and i32 %139, 1
  %141 = or i32 %140, %134
  %142 = lshr i32 %10, 16
  %143 = and i32 %142, 1
  %144 = or i32 %143, %133
  %145 = shl i32 %132, 4
  %146 = shl nuw nsw i32 %144, 2
  %147 = or i32 %145, %146
  %148 = and i32 %142, 2
  %149 = shl i32 %128, 4
  %150 = shl nuw nsw i32 %141, 2
  %151 = or i32 %149, %150
  %152 = and i32 %139, 2
  %153 = shl i32 %124, 4
  %154 = shl nuw nsw i32 %138, 2
  %155 = or i32 %153, %154
  %156 = and i32 %136, 2
  %157 = lshr i32 %2, 18
  %158 = and i32 %157, 1
  %159 = or i32 %158, %156
  %160 = or i32 %159, %155
  %161 = lshr i32 %6, 18
  %162 = and i32 %161, 1
  %163 = or i32 %162, %152
  %164 = or i32 %163, %151
  %165 = lshr i32 %10, 18
  %166 = and i32 %165, 1
  %167 = or i32 %166, %148
  %168 = or i32 %167, %147
  %169 = and i32 %165, 2
  %170 = and i32 %161, 2
  %171 = and i32 %157, 2
  %172 = lshr i32 %2, 20
  %173 = and i32 %172, 1
  %174 = or i32 %173, %171
  %175 = lshr i32 %6, 20
  %176 = and i32 %175, 1
  %177 = or i32 %176, %170
  %178 = lshr i32 %10, 20
  %179 = and i32 %178, 1
  %180 = or i32 %179, %169
  %181 = shl i32 %168, 4
  %182 = shl nuw nsw i32 %180, 2
  %183 = or i32 %181, %182
  %184 = and i32 %178, 2
  %185 = shl i32 %164, 4
  %186 = shl nuw nsw i32 %177, 2
  %187 = or i32 %185, %186
  %188 = and i32 %175, 2
  %189 = shl i32 %160, 4
  %190 = shl nuw nsw i32 %174, 2
  %191 = or i32 %189, %190
  %192 = and i32 %172, 2
  %193 = lshr i32 %2, 22
  %194 = and i32 %193, 1
  %195 = or i32 %194, %192
  %196 = or i32 %195, %191
  %197 = lshr i32 %6, 22
  %198 = and i32 %197, 1
  %199 = or i32 %198, %188
  %200 = or i32 %199, %187
  %201 = lshr i32 %10, 22
  %202 = and i32 %201, 1
  %203 = or i32 %202, %184
  %204 = or i32 %203, %183
  %205 = and i32 %201, 2
  %206 = and i32 %197, 2
  %207 = and i32 %193, 2
  %208 = lshr i32 %2, 24
  %209 = and i32 %208, 1
  %210 = or i32 %209, %207
  %211 = lshr i32 %6, 24
  %212 = and i32 %211, 1
  %213 = or i32 %212, %206
  %214 = lshr i32 %10, 24
  %215 = and i32 %214, 1
  %216 = or i32 %215, %205
  %217 = shl i32 %204, 4
  %218 = shl nuw nsw i32 %216, 2
  %219 = or i32 %217, %218
  %220 = and i32 %214, 2
  %221 = shl i32 %200, 4
  %222 = shl nuw nsw i32 %213, 2
  %223 = or i32 %221, %222
  %224 = and i32 %211, 2
  %225 = shl i32 %196, 4
  %226 = shl nuw nsw i32 %210, 2
  %227 = or i32 %225, %226
  %228 = and i32 %208, 2
  %229 = lshr i32 %2, 26
  %230 = and i32 %229, 1
  %231 = or i32 %230, %228
  %232 = or i32 %231, %227
  %233 = lshr i32 %6, 26
  %234 = and i32 %233, 1
  %235 = or i32 %234, %224
  %236 = or i32 %235, %223
  %237 = lshr i32 %10, 26
  %238 = and i32 %237, 1
  %239 = or i32 %238, %220
  %240 = or i32 %239, %219
  %241 = and i32 %237, 2
  %242 = and i32 %233, 2
  %243 = and i32 %229, 2
  %244 = lshr i32 %2, 28
  %245 = and i32 %244, 1
  %246 = or i32 %245, %243
  %247 = lshr i32 %6, 28
  %248 = and i32 %247, 1
  %249 = or i32 %248, %242
  %250 = lshr i32 %10, 28
  %251 = and i32 %250, 1
  %252 = or i32 %251, %241
  %253 = shl i32 %240, 4
  %254 = shl nuw nsw i32 %252, 2
  %255 = or i32 %253, %254
  %256 = and i32 %250, 2
  %257 = shl i32 %236, 4
  %258 = shl nuw nsw i32 %249, 2
  %259 = or i32 %257, %258
  %260 = and i32 %247, 2
  %261 = shl i32 %232, 4
  %262 = shl nuw nsw i32 %246, 2
  %263 = or i32 %261, %262
  %264 = and i32 %244, 2
  %265 = lshr i32 %2, 30
  %266 = and i32 %265, 1
  %267 = or i32 %266, %264
  %268 = or i32 %267, %263
  %269 = lshr i32 %6, 30
  %270 = and i32 %269, 1
  %271 = or i32 %270, %260
  %272 = or i32 %271, %259
  %273 = lshr i32 %10, 30
  %274 = and i32 %273, 1
  %275 = or i32 %274, %256
  %276 = or i32 %275, %255
  %277 = shl i32 %276, 1
  %278 = shl i32 %272, 1
  %279 = shl i32 %268, 1
  %.lobit = lshr i32 %2, 31
  %.sroa.260.31 = or i32 %279, %.lobit
  %.lobit242 = lshr i32 %6, 31
  %spec.select239 = or i32 %278, %.lobit242
  %.lobit243 = lshr i32 %10, 31
  %.sroa.0.31 = or i32 %277, %.lobit243
  store i32 %.sroa.0.31, i32* %0, align 4
  store i32 %spec.select239, i32* %5, align 4
  store i32 %.sroa.260.31, i32* %9, align 4
  ret void
}

attributes #0 = { noinline nounwind sspstrong uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { nofree nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nofree noinline norecurse nounwind sspstrong uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.ident = !{!0, !0}
!llvm.module.flags = !{!1, !2, !3}

!0 = !{!"clang version 10.0.0 "}
!1 = !{i32 1, !"wchar_size", i32 4}
!2 = !{i32 7, !"PIC Level", i32 2}
!3 = !{i32 7, !"PIE Level", i32 2}
